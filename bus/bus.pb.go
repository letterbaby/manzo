// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bus.proto

package bus

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Cmd int32

const (
	Cmd_NONE      Cmd = 0
	Cmd_REG_SVR   Cmd = 1
	Cmd_PING      Cmd = 2
	Cmd_NEW_SVR   Cmd = 3
	Cmd_ROUTE_MSG Cmd = 4
)

var Cmd_name = map[int32]string{
	0: "NONE",
	1: "REG_SVR",
	2: "PING",
	3: "NEW_SVR",
	4: "ROUTE_MSG",
}

var Cmd_value = map[string]int32{
	"NONE":      0,
	"REG_SVR":   1,
	"PING":      2,
	"NEW_SVR":   3,
	"ROUTE_MSG": 4,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}

func (Cmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{0}
}

type ErrorCode int32

const (
	ErrorCode_SUCCESS       ErrorCode = 0
	ErrorCode_SYSTEM_UNKNOW ErrorCode = 999
)

var ErrorCode_name = map[int32]string{
	0:   "SUCCESS",
	999: "SYSTEM_UNKNOW",
}

var ErrorCode_value = map[string]int32{
	"SUCCESS":       0,
	"SYSTEM_UNKNOW": 999,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{1}
}

type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type RegSvrInfo struct {
	SrcId                int64    `protobuf:"varint,1,opt,name=srcId,proto3" json:"srcId,omitempty"`
	DestId               int64    `protobuf:"varint,2,opt,name=destId,proto3" json:"destId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegSvrInfo) Reset()         { *m = RegSvrInfo{} }
func (m *RegSvrInfo) String() string { return proto.CompactTextString(m) }
func (*RegSvrInfo) ProtoMessage()    {}
func (*RegSvrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{1}
}

func (m *RegSvrInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegSvrInfo.Unmarshal(m, b)
}
func (m *RegSvrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegSvrInfo.Marshal(b, m, deterministic)
}
func (m *RegSvrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegSvrInfo.Merge(m, src)
}
func (m *RegSvrInfo) XXX_Size() int {
	return xxx_messageInfo_RegSvrInfo.Size(m)
}
func (m *RegSvrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegSvrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegSvrInfo proto.InternalMessageInfo

func (m *RegSvrInfo) GetSrcId() int64 {
	if m != nil {
		return m.SrcId
	}
	return 0
}

func (m *RegSvrInfo) GetDestId() int64 {
	if m != nil {
		return m.DestId
	}
	return 0
}

type NewSvrInfo struct {
	DestId               int64    `protobuf:"varint,1,opt,name=destId,proto3" json:"destId,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewSvrInfo) Reset()         { *m = NewSvrInfo{} }
func (m *NewSvrInfo) String() string { return proto.CompactTextString(m) }
func (*NewSvrInfo) ProtoMessage()    {}
func (*NewSvrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{2}
}

func (m *NewSvrInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewSvrInfo.Unmarshal(m, b)
}
func (m *NewSvrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewSvrInfo.Marshal(b, m, deterministic)
}
func (m *NewSvrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewSvrInfo.Merge(m, src)
}
func (m *NewSvrInfo) XXX_Size() int {
	return xxx_messageInfo_NewSvrInfo.Size(m)
}
func (m *NewSvrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewSvrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewSvrInfo proto.InternalMessageInfo

func (m *NewSvrInfo) GetDestId() int64 {
	if m != nil {
		return m.DestId
	}
	return 0
}

func (m *NewSvrInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *NewSvrInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type RouteInfo struct {
	DestSvr              int64    `protobuf:"varint,1,opt,name=destSvr,proto3" json:"destSvr,omitempty"`
	DestAll              bool     `protobuf:"varint,2,opt,name=destAll,proto3" json:"destAll,omitempty"`
	Msg                  []byte   `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteInfo) Reset()         { *m = RouteInfo{} }
func (m *RouteInfo) String() string { return proto.CompactTextString(m) }
func (*RouteInfo) ProtoMessage()    {}
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{3}
}

func (m *RouteInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteInfo.Unmarshal(m, b)
}
func (m *RouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteInfo.Marshal(b, m, deterministic)
}
func (m *RouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfo.Merge(m, src)
}
func (m *RouteInfo) XXX_Size() int {
	return xxx_messageInfo_RouteInfo.Size(m)
}
func (m *RouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfo proto.InternalMessageInfo

func (m *RouteInfo) GetDestSvr() int64 {
	if m != nil {
		return m.DestSvr
	}
	return 0
}

func (m *RouteInfo) GetDestAll() bool {
	if m != nil {
		return m.DestAll
	}
	return false
}

func (m *RouteInfo) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CommonMessage struct {
	Code                 Cmd         `protobuf:"varint,1,opt,name=code,proto3,enum=bus.Cmd" json:"code,omitempty"`
	ErrorCode            ErrorCode   `protobuf:"varint,2,opt,name=errorCode,proto3,enum=bus.ErrorCode" json:"errorCode,omitempty"`
	Ping                 *Ping       `protobuf:"bytes,10,opt,name=ping,proto3" json:"ping,omitempty"`
	SvrInfo              *RegSvrInfo `protobuf:"bytes,11,opt,name=svrInfo,proto3" json:"svrInfo,omitempty"`
	NewSvrInfo           *NewSvrInfo `protobuf:"bytes,12,opt,name=newSvrInfo,proto3" json:"newSvrInfo,omitempty"`
	RouteInfo            *RouteInfo  `protobuf:"bytes,13,opt,name=routeInfo,proto3" json:"routeInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CommonMessage) Reset()         { *m = CommonMessage{} }
func (m *CommonMessage) String() string { return proto.CompactTextString(m) }
func (*CommonMessage) ProtoMessage()    {}
func (*CommonMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9aee8707d5a25b8, []int{4}
}

func (m *CommonMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonMessage.Unmarshal(m, b)
}
func (m *CommonMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonMessage.Marshal(b, m, deterministic)
}
func (m *CommonMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonMessage.Merge(m, src)
}
func (m *CommonMessage) XXX_Size() int {
	return xxx_messageInfo_CommonMessage.Size(m)
}
func (m *CommonMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommonMessage proto.InternalMessageInfo

func (m *CommonMessage) GetCode() Cmd {
	if m != nil {
		return m.Code
	}
	return Cmd_NONE
}

func (m *CommonMessage) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_SUCCESS
}

func (m *CommonMessage) GetPing() *Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *CommonMessage) GetSvrInfo() *RegSvrInfo {
	if m != nil {
		return m.SvrInfo
	}
	return nil
}

func (m *CommonMessage) GetNewSvrInfo() *NewSvrInfo {
	if m != nil {
		return m.NewSvrInfo
	}
	return nil
}

func (m *CommonMessage) GetRouteInfo() *RouteInfo {
	if m != nil {
		return m.RouteInfo
	}
	return nil
}

var BUS_structType = map[string]interface{}{
	"Ping":          Ping{},
	"RegSvrInfo":    RegSvrInfo{},
	"NewSvrInfo":    NewSvrInfo{},
	"RouteInfo":     RouteInfo{},
	"CommonMessage": CommonMessage{},
}

func init() {
	proto.RegisterEnum("bus.Cmd", Cmd_name, Cmd_value)
	proto.RegisterEnum("bus.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*Ping)(nil), "bus.Ping")
	proto.RegisterType((*RegSvrInfo)(nil), "bus.RegSvrInfo")
	proto.RegisterType((*NewSvrInfo)(nil), "bus.NewSvrInfo")
	proto.RegisterType((*RouteInfo)(nil), "bus.RouteInfo")
	proto.RegisterType((*CommonMessage)(nil), "bus.CommonMessage")
}

func init() { proto.RegisterFile("bus.proto", fileDescriptor_e9aee8707d5a25b8) }

var fileDescriptor_e9aee8707d5a25b8 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0xeb, 0x3f, 0x4b, 0xe2, 0x93, 0x3a, 0x33, 0x87, 0x31, 0x74, 0xb1, 0x41, 0xf0, 0x55,
	0x56, 0x4a, 0x07, 0xdd, 0xdd, 0xee, 0x36, 0x63, 0x32, 0x33, 0xe2, 0x74, 0x52, 0xb3, 0xb2, 0xab,
	0xb0, 0xd4, 0x9a, 0x31, 0xd4, 0x96, 0x91, 0x9c, 0xee, 0x05, 0xf6, 0xae, 0x7b, 0x8d, 0xa2, 0x93,
	0x38, 0xce, 0x9d, 0xce, 0xa7, 0xdf, 0xf9, 0x10, 0x3f, 0x04, 0xc1, 0x6e, 0x6f, 0x6e, 0x5a, 0xad,
	0x3a, 0x85, 0xde, 0x6e, 0x6f, 0xe2, 0x11, 0xf8, 0x77, 0x55, 0x53, 0xc6, 0x9f, 0x01, 0xb8, 0x2c,
	0xc5, 0xb3, 0xce, 0x9a, 0x3f, 0x0a, 0xdf, 0xc0, 0x2b, 0xa3, 0x1f, 0xb3, 0x82, 0x39, 0x73, 0x67,
	0xe1, 0xf1, 0xc3, 0x80, 0x6f, 0x61, 0x54, 0x48, 0xd3, 0x65, 0x05, 0x73, 0x29, 0x3e, 0x4e, 0xf1,
	0x37, 0x80, 0x5c, 0xfe, 0xed, 0x77, 0x07, 0xca, 0x39, 0xa7, 0x70, 0x06, 0x6e, 0xd5, 0xd2, 0x66,
	0xc0, 0xdd, 0xaa, 0x45, 0x04, 0xbf, 0x55, 0xba, 0x63, 0x1e, 0x25, 0x74, 0x8e, 0x7f, 0x40, 0xc0,
	0xd5, 0xbe, 0x93, 0x54, 0xc4, 0x60, 0x6c, 0x57, 0xc5, 0xb3, 0x3e, 0x36, 0xf5, 0x63, 0x7f, 0xf3,
	0xe5, 0xe9, 0x89, 0xfa, 0x26, 0xbc, 0x1f, 0x31, 0x02, 0xaf, 0x36, 0x25, 0xf3, 0xe7, 0xce, 0xe2,
	0x92, 0xdb, 0x63, 0xfc, 0xcf, 0x85, 0x30, 0x51, 0x75, 0xad, 0x9a, 0x95, 0x34, 0xe6, 0x77, 0x29,
	0xf1, 0x1d, 0xf8, 0x8f, 0xaa, 0x90, 0x54, 0x3a, 0xbb, 0x9d, 0xdc, 0x58, 0x23, 0x49, 0x5d, 0x70,
	0x4a, 0xf1, 0x1a, 0x02, 0xa9, 0xb5, 0xd2, 0x89, 0x45, 0x5c, 0x42, 0x66, 0x84, 0xa4, 0x7d, 0xca,
	0x07, 0x00, 0xdf, 0x83, 0xdf, 0x56, 0x4d, 0xc9, 0x60, 0xee, 0x2c, 0xa6, 0xb7, 0x01, 0x81, 0xd6,
	0x27, 0xa7, 0x18, 0x3f, 0xc0, 0xd8, 0x1c, 0xb4, 0xb0, 0x29, 0x11, 0xaf, 0x89, 0x18, 0x4c, 0xf3,
	0xfe, 0x1e, 0x3f, 0x02, 0x34, 0x27, 0x89, 0xec, 0xf2, 0x8c, 0x1e, 0xdc, 0xf2, 0x33, 0xc4, 0x3e,
	0x54, 0xf7, 0xae, 0x58, 0x48, 0xfc, 0xe1, 0xa1, 0x27, 0x83, 0x7c, 0x00, 0xae, 0xbe, 0x82, 0x97,
	0xd4, 0x05, 0x4e, 0xc0, 0xcf, 0xd7, 0x79, 0x1a, 0x5d, 0xe0, 0x14, 0xc6, 0x3c, 0x5d, 0x6e, 0xc5,
	0x4f, 0x1e, 0x39, 0x36, 0xbe, 0xcb, 0xf2, 0x65, 0xe4, 0xda, 0x38, 0x4f, 0x1f, 0x28, 0xf6, 0x30,
	0x84, 0x80, 0xaf, 0x37, 0xf7, 0xe9, 0x76, 0x25, 0x96, 0x91, 0x7f, 0x75, 0x0d, 0xc1, 0x49, 0x82,
	0x05, 0xc5, 0x26, 0x49, 0x52, 0x21, 0xa2, 0x0b, 0x44, 0x08, 0xc5, 0x2f, 0x71, 0x9f, 0xae, 0xb6,
	0x9b, 0xfc, 0x7b, 0xbe, 0x7e, 0x88, 0xfe, 0x8f, 0x77, 0x23, 0xfa, 0x65, 0x9f, 0x5e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xab, 0x61, 0x8b, 0x8c, 0x72, 0x02, 0x00, 0x00,
}
