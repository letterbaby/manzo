// Code generated by tbltool. DO NOT EDIT.
{{$t := .Tbl}}// source:{{$t.Name}}tbl.md

{{$t := .Tbl}}
package {{$t.Name}}tbl

import (
	"strconv"

	"github.com/letterbaby/manzo/logger"
	"github.com/letterbaby/manzo/mysql"

	"github.com/golang/protobuf/proto"
)

var (
	cols map[string]*mysql.MyFiled
	
	idlst =[]string{
	{{- range $f := .Fields}}
		"{{fmtf $f}}",
	{{- end}}
	}
	
	idxlst =[]string{
	{{- range $f := .Fields}}
	{{- if isindex $f}}
		"{{$f.Name}}",
	{{- end}}
	{{- end}}
	}	
	
	prmlst=[]string{
	{{- range $f := .Fields}}
	{{- if isprm $f}}
		"{{$f.Name}}",
	{{- end}}
	{{- end}}
	}
)

const (
	tblname = "{{$t.Name}}"
	idname  = "{{$t.IdName}}"
)

type {{upperfc $t.Name}}Data struct {
	mysql.MyData
}

func Init(tbln string, dbops *mysql.MyOps) {
	if len(tbln) >0 {
		dbops.UseTable(tbln)
	} else {
		dbops.UseTable(tblname)
	}
	//MyISAM,InnoDB
	
	
	dbops.CreateTable("InnoDB", 10000, "{{$t.Des}}", idlst, idxlst, prmlst)

{{- range $f := .Fields}}
	dbops.AlertField("{{$f.Name}}", "{{ftype $f}}", "{{$f.Des}}", {{- if intx $f.Protot}} {{$f.Default}} {{- else}} "" {{- end}}, {{blob $f.Dbt}})
{{- end}}

	{{- range $f := .Fields}}
	{{- if isindex $f}}
	dbops.AddIndexKey(" ADD INDEX idx_{{$f.Name}}(`{{$f.Name}}`) ")
	{{- end}}
	{{- end}}

	cols = dbops.GetCols()
}

func cd(id interface{}, tbln string, dbmgr *mysql.DBMgr)*{{upperfc $t.Name}}Data {
	if len(cols) == 0 {
		logger.Error("CreateData len(cols) == 0")
		return nil
	}
	
	data := &{{upperfc $t.Name}}Data{}
	data.Id = id
	data.IdName = idname
	
	if len(tbln) >0 {
		data.TableName = tbln
	} else {
		data.TableName = tblname
	}	

	data.DbMgr = dbmgr

	// 复制一份通用字段
	data.Cols = make(map[string]*mysql.MyFiled)
	for k, v := range cols {
		data.Cols[k] = &mysql.MyFiled{Data:v.Data, Bin:v.Bin}
	}

	return data
}

func CreateData(id int32, tbln string, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	return cd(int(id), tbln, dbmgr)
}

func CreateDataEx(id string, tbln string, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	return cd(id, tbln, dbmgr)
}

func ld(id interface{}, tbln string, create bool, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	data := cd(id, tbln, dbmgr)
	
	if data == nil {
		return nil
	}

	ret := data.Load()
	if ret == mysql.Ret_err{
		return nil
	}

	if ret == mysql.Ret_nodata {
		if  !create || !data.Create() {
			return nil
		}
	}

	return data
}

func LoadData(id int32, tbln string, create bool, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	return ld(int(id), tbln, create, dbmgr)
}

func LoadDataEx(id string, tbln string, create bool, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	return ld(id, tbln, create, dbmgr)
}

func dd(id interface{}, tbln string, auto bool, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	data := &{{upperfc $t.Name}}Data{}
	data.Id = id
	data.IdName = idname
	
	if len(tbln) >0 {
		data.TableName = tbln
	} else {
		data.TableName = tblname
	}		

	data.DbMgr = dbmgr

	if auto {
		data.Delete(false)
	}

	return data
}

func DelData(id int32, tbln string, auto bool, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	return dd(int(id), tbln, auto, dbmgr)
}

func DelDataEx(id string, tbln string, auto bool, dbmgr *mysql.DBMgr) *{{upperfc $t.Name}}Data {
	return dd(id, tbln, auto, dbmgr)
}

func (self *{{upperfc $t.Name}}Data) GetData() []byte {
	tbl := &Tbl{}
	
{{- range $f := .Fields}}	
	{{- if intx $f.Protot}}
	{{- if protor $f.Protorw}}
	tbl.{{upperfc $f.Name }} = proto.Int32(self.Get{{upperfc $f.Name}}())
	{{- else}}
	//tbl.{{upperfc $f.Name }} = proto.Int32(self.Get{{upperfc $f.Name}}())
	{{- end}}
	{{- else}}
	{{- if protor $f.Protorw}}
	tbl.{{upperfc $f.Name }} = proto.String(self.Get{{upperfc $f.Name}}())
	{{- else}}
	//tbl.{{upperfc $f.Name }} = proto.String(self.Get{{upperfc $f.Name}}())
	{{- end}}
	{{- end}}
{{- end}}	
	
	pdata, err := proto.Marshal(tbl)
	if err != nil {
		logger.Error("{{upperfc $t.Name }}Data getdata:%v", err)
		return nil
	}

	return pdata
}

func (self *{{upperfc $t.Name}}Data) SetData(p []byte) {
	tbl := &Tbl{}
	err := proto.Unmarshal(p, tbl)
	if err != nil {
		logger.Error("{{upperfc $t.Name }}Data setdata:%v", err)
		return
	}

{{- range $f := .Fields}}	
	{{- if protow $f.Protorw}}
	if tbl.{{upperfc $f.Name }} != nil {
		self.Set{{upperfc $f.Name }}(tbl.Get{{upperfc $f.Name }}())
	}
	{{- else}}
	//if tbl.{{upperfc $f.Name }} != nil {
	//	self.Set{{upperfc $f.Name }}(tbl.Get{{upperfc $f.Name }}())
	//}
	{{- end}}
{{- end}}	
}

func (self *{{upperfc $t.Name}}Data) SetTbl(tbl *Tbl) {

{{- range $f := .Fields}}	

	{{- if protow $f.Protorw}}
	if tbl.{{upperfc $f.Name }} != nil {
		self.Set{{upperfc $f.Name }}(tbl.Get{{upperfc $f.Name }}())
	}
	{{- else}}
	//if tbl.{{upperfc $f.Name }} != nil {
	//	self.Set{{upperfc $f.Name }}(tbl.Get{{upperfc $f.Name }}())
	//}
	{{- end}}

{{- end}}	
}

func (self *{{upperfc $t.Name}}Data) SetValues(rd map[string]string) {
	// KEY int?
	for k, v := range rd {
		switch k {
		{{- range $f := .Fields}}
		case "{{$f.Name}}":
			{{- if intx $f.Protot}}
			d, _ := strconv.Atoi(v)
			self.Set{{upperfc $f.Name}}(int32(d))
			{{- else}}
			self.Set{{upperfc $f.Name}}(v)
			{{- end}}

		{{- end}}
		default:
			logger.Error("{{upperfc $t.Name}}Data:SetValues k:%v", k)
		}
	}
}

func (self *{{upperfc $t.Name}}Data) GetValues() [][]string {
	// ATUO_ID -1
	rt := make([][]string, len(cols) - 1)

	{{- range $f := .Fields}}
	
	kv_{{$f.Name}} := make([]string , 2)
	kv_{{$f.Name}}[0] = "{{$f.Name}}"
	{{- if intx $f.Protot}}
	kv_{{$f.Name}}[1] = strconv.Itoa(int(self.Get{{upperfc $f.Name}}()))
	{{- else}}
	kv_{{$f.Name}}[1] = self.Get{{upperfc $f.Name}}()
	{{- end}}
	rt[{{$f.Id}}-1] = kv_{{$f.Name}}
	{{- end}}
	
	return rt
}

// 属性的get{}, set{}
{{- range $f := .Fields}}	
	{{- if intx $f.Protot}}

func (self *{{upperfc $t.Name}}Data) Get{{upperfc $f.Name}}() int32 {
	return int32(self.GetInt("{{$f.Name}}"))
}

func (self *{{upperfc $t.Name}}Data) Set{{upperfc $f.Name}}(v int32) int {
	self.SetInt("{{$f.Name}}", int(v))
	return {{$f.Id}} - 1
}
	{{- else}}

func (self *{{upperfc $t.Name}}Data) Get{{upperfc $f.Name}}() string {
	return self.GetStr("{{$f.Name}}")
}

func (self *{{upperfc $t.Name}}Data) Set{{upperfc $f.Name}}(v string) int {
	self.SetStr("{{$f.Name}}", v)
	return {{$f.Id}} - 1
}
	{{- end}}
{{- end}}
