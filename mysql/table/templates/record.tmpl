// Code generated by tbltool. DO NOT EDIT.
{{$t := .Tbl}}// source:{{$t.Name}}tbl.md

{{$t := .Tbl}}
package {{$t.Name}}tbl

import (
	"github.com/golang/protobuf/proto"
	"github.com/letterbaby/manzo/logger"
)

type {{upperfc $t.Name}}Record struct {
	dirty  *Tbl
	record *Tbl
	flag int64
	isDirty bool
}

func New{{upperfc $t.Name}}Record(buf []byte, flag int64) *{{upperfc $t.Name}}Record {
	rec := &{{upperfc $t.Name}}Record{}
	if !rec.Init(buf, flag) {
		return nil
	}
	return rec
}

func (self *{{upperfc $t.Name}}Record) Init(buf []byte, flag int64) bool {
	self.flag = flag
	self.dirty = &Tbl{}
	self.record = &Tbl{}
	self.isDirty = false

	err := proto.Unmarshal(buf, self.record)
	if err != nil {
		logger.Error("{{upperfc $t.Name}}Record:Init flag:%v,i:%v", self.flag, err)
		return false
	}
	return true
}

func (self *{{upperfc $t.Name}}Record) Dirty(f bool) []byte {
	force := func() []byte {
		d, err := proto.Marshal(self.record)
		if err != nil {
			logger.Error("{{upperfc $t.Name}}Record:Record flag:%v,i:%v", self.flag, err)
			return nil
		}
		
		self.dirty = &Tbl{}
		self.isDirty = false
		return d
	}
	
	dirty := func() []byte {
		if !self.isDirty {
			return nil
		}

		d, err := proto.Marshal(self.dirty)
		if err != nil {
			logger.Error("{{upperfc $t.Name}}Record:Dirty flag:%v,i:%v", self.flag, err)
			return nil
		}
		
		self.dirty = &Tbl{}
		self.isDirty = false
		return d
	}
	
	if !f {
		return dirty()
	}

	return force()
}

func (self *{{upperfc $t.Name}}Record) Record() []byte {
	d, err := proto.Marshal(self.record)
	if err != nil {
		logger.Error("{{upperfc $t.Name}}Record:Record flag:%v,i:%v", self.flag, err)
		return nil
	}
	return d
}

// 属性的get{}, set{}

func (self *{{upperfc $t.Name}}Record) GetValueByKey(k string) interface{} {
	return self.record.GetValueByKey(k)
}

func (self *{{upperfc $t.Name}}Record) SetValueByKey(k string, v interface{}) {
	n := self.record.GetValueByKey(k)
	
	var pv interface{}
	
	switch k {
	{{- range $f := .Fields}}
	case "{{$f.Name}}":
	{{- if int32x $f.Protot}}
		vi := v.(int32)
		if vi == n.(int32) {
			return
		}
		pv = proto.Int32(vi)
	{{- else if int64x $f.Protot}}
		vi := v.(int64)
		if vi == n.(int64) {
			return
		}
		pv = proto.Int64(vi)
	{{- else}}
		vs := v.(string)
		ns := n.(string)
		if len(vs) == len(ns) && vs == ns {
			return
		}
		pv = proto.String(vs)
	{{- end}}
	{{- end}}
	default:
		logger.Error("{{upperfc $t.Name}}Record:SetValueByKey flag:%v,k:%v", self.flag, k)
		return
	}

	self.dirty.SetValueByKey(k, pv)
	self.record.SetValueByKey(k, pv)
	self.isDirty = true
}

{{- range $f := .Fields}}	
	{{- if int32x $f.Protot}}

func (self *{{upperfc $t.Name}}Record) Get{{upperfc $f.Name}}() int32 {
	return self.record.Get{{upperfc $f.Name}}()
}

func (self *{{upperfc $t.Name}}Record) Set{{upperfc $f.Name}}(v int32) {
	n := self.record.Get{{upperfc $f.Name}}()
	if v == n {
		return
	}
	
	self.dirty.{{upperfc $f.Name }} = proto.Int32(v)
	self.record.{{upperfc $f.Name }} = proto.Int32(v)
	self.isDirty = true
}
	{{- else if int64x $f.Protot}}

func (self *{{upperfc $t.Name}}Record) Get{{upperfc $f.Name}}() int64 {
	return self.record.Get{{upperfc $f.Name}}()
}

func (self *{{upperfc $t.Name}}Record) Set{{upperfc $f.Name}}(v int64) {
	n := self.record.Get{{upperfc $f.Name}}()
	if v == n {
		return
	}
	
	self.dirty.{{upperfc $f.Name }} = proto.Int64(v)
	self.record.{{upperfc $f.Name }} = proto.Int64(v)
	self.isDirty = true
}

	{{- else}}

func (self *{{upperfc $t.Name}}Record) Get{{upperfc $f.Name}}() string {
	return self.record.Get{{upperfc $f.Name}}()
}

func (self *{{upperfc $t.Name}}Record) Set{{upperfc $f.Name}}(v string) {
	n := self.record.Get{{upperfc $f.Name}}()
	if len(v) == len(n) && v == n {
		return
	}

	self.dirty.{{upperfc $f.Name }} = proto.String(v)
	self.record.{{upperfc $f.Name }} = proto.String(v)
	self.isDirty = true	
}
	{{- end}}
{{- end}}
